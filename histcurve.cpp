// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "histcurve.h"

/////////////////////////////////////////////////////////////////////////////
// CHistCurve

IMPLEMENT_DYNCREATE(CHistCurve, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CHistCurve properties

CString CHistCurve::GetCaption()
{
	CString result;
	GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
	return result;
}

void CHistCurve::SetCaption(LPCTSTR propVal)
{
	SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
}

OLE_COLOR CHistCurve::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CHistCurve::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

OLE_COLOR CHistCurve::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CHistCurve::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

short CHistCurve::GetBorderStyle()
{
	short result;
	GetProperty(DISPID_BORDERSTYLE, VT_I2, (void*)&result);
	return result;
}

void CHistCurve::SetBorderStyle(short propVal)
{
	SetProperty(DISPID_BORDERSTYLE, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CHistCurve operations

long CHistCurve::AddPoint(double f8Value)
{
	long result;
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		f8Value);
	return result;
}

double CHistCurve::SetYScal(double f8YScal)
{
	double result;
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		f8YScal);
	return result;
}

void CHistCurve::SetBufferSize(long iBufferSize)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 iBufferSize);
}

void CHistCurve::SetEraseColor(short ucRed, short ucGreen, short ucBlue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ucRed, ucGreen, ucBlue);
}

void CHistCurve::SetCurveColor(short ucRed, short ucGreen, short ucBlue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ucRed, ucGreen, ucBlue);
}

BOOL CHistCurve::ExtractData(double* pf8Value, long iNum)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_I4;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pf8Value, iNum);
	return result;
}

long CHistCurve::GetBufferSize()
{
	long result;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

double CHistCurve::GetYScal()
{
	double result;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

double CHistCurve::GetFirstPoint()
{
	double result;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

void CHistCurve::SetYZeroValue(double f8YZeroValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 f8YZeroValue);
}

long CHistCurve::GetEraseColor()
{
	long result;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CHistCurve::GetCurveColor()
{
	long result;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

double CHistCurve::GetYZero()
{
	double result;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}
